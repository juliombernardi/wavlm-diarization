import argparse
import csv
from pathlib import Path

import numpy as np
import simpleaudio as sa
import soundfile as sf

"""validate_diarization.py - interactive RTTM validator.

Run with
---------
python validate_diarization.py \
    --audio ./.data/test_chester.wav \
    --rttm  ./.temp/test_chester.rttm \
    --output validation_results.csv
"""

###############################################################################
# Helpers                                                                      #
###############################################################################


def parse_rttm(rttm_path: Path):
    """Return a list of segments from an RTTM SPEAKER file."""
    segments = []
    with rttm_path.open() as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) < 9 or parts[0].upper() != 'SPEAKER':
                continue
            # RTTM: SPEAKER <file> <ch> <start> <dur> <NA> <NA> <spk_id> <NA> <NA>
            file_id = parts[1]
            channel = int(parts[2])
            start = float(parts[3])
            dur = float(parts[4])
            speaker_id = parts[7]
            segments.append(
                {
                    'file_id': file_id,
                    'channel': channel,
                    'start': start,
                    'duration': dur,
                    'predicted': speaker_id,
                }
            )
    return segments


def play_segment(audio_path: Path, start: float, duration: float, sr: int):
    """Play *duration* seconds of *audio_path* starting at *start* (in seconds)."""
    data, _ = sf.read(audio_path, start=int(start * sr), frames=int(duration * sr))
    channels = 1 if data.ndim == 1 else data.shape[1]
    peak = np.max(np.abs(data)) or 1.0
    pcm = (data * 32767 / peak).astype(np.int16)
    sa.play_buffer(pcm, num_channels=channels, bytes_per_sample=2, sample_rate=sr).wait_done()


###############################################################################
# Main                                                                         #
###############################################################################


def main():
    parser = argparse.ArgumentParser(description='Interactively validate diarization RTTM output.')
    parser.add_argument('--audio', required=True, type=Path, help='WAV file used for diarization')
    parser.add_argument('--rttm', required=True, type=Path, help='RTTM file to validate')
    parser.add_argument(
        '--output', default='validation_results.csv', type=Path, help='CSV to store annotations'
    )
    args = parser.parse_args()

    # Load audio once for sample-rate reference
    _, sr = sf.read(args.audio, stop=1)

    segments = parse_rttm(args.rttm)
    if not segments:
        print(f'No SPEAKER lines found in {args.rttm}')
        return

    print(f'Loaded {len(segments)} segments from {args.rttm}\n')

    results = []
    for idx, seg in enumerate(segments, 1):
        start = seg['start']
        dur = seg['duration']
        pred = seg['predicted']

        print(f'[{idx}/{len(segments)}] {start:.2f}s–{start + dur:.2f}s  |  predicted: {pred}')
        input('Press <Enter> to play…')
        play_segment(args.audio, start, dur, sr)

        # Collect feedback
        is_speech = (input('Is this speech? [y]/n: ').strip().lower() or 'y') == 'y'
        correct_label = pred
        if is_speech:
            correct = (
                input(f"Speaker label '{pred}' correct? [y]/n: ").strip().lower() or 'y'
            ) == 'y'
            if not correct:
                correct_label = input('Enter correct speaker label: ').strip() or pred
        else:
            correct_label = '<non-speech>'

        results.append(
            {
                'start': start,
                'duration': dur,
                'predicted': pred,
                'is_speech': is_speech,
                'correct': correct_label,
            }
        )
        print('____________________________________________________________\n')

    # Save CSV
    with args.output.open('w', newline='') as f:
        writer = csv.DictWriter(
            f,
            fieldnames=['start', 'duration', 'predicted', 'is_speech', 'correct'],
        )
        writer.writeheader()
        writer.writerows(results)